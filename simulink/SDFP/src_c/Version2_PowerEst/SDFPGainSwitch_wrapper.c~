/*
  *
  *   --- THIS FILE GENERATED BY S-FUNCTION BUILDER: 3.0 ---
  *
  *   This file is a wrapper S-function produced by the S-Function
  *   Builder which only recognizes certain fields.  Changes made
  *   outside these fields will be lost the next time the block is
  *   used to load, edit, and resave this file. This file will be overwritten
  *   by the S-function Builder block. If you want to edit this file by hand, 
  *   you must change it only in the area defined as:  
  *
  *        %%%-SFUNWIZ_wrapper_XXXXX_Changes_BEGIN 
  *            Your Changes go here
  *        %%%-SFUNWIZ_wrapper_XXXXXX_Changes_END
  *
  *   For better compatibility with the Real-Time Workshop, the
  *   "wrapper" S-function technique is used.  This is discussed
  *   in the Real-Time Workshop User's Manual in the Chapter titled,
  *   "Wrapper S-functions".
  *
  *   Created: Wed Feb 24 20:29:18 2010
  */


/*
 * Include Files
 *
 */
#if defined(MATLAB_MEX_FILE)
#include "tmwtypes.h"
#include "simstruc_types.h"
#else
#include "rtwtypes.h"
#endif

/* %%%-SFUNWIZ_wrapper_includes_Changes_BEGIN --- EDIT HERE TO _END */
#include <math.h>
#include "fpconv.h"
/* %%%-SFUNWIZ_wrapper_includes_Changes_END --- EDIT HERE TO _BEGIN */
#define u_width 1
#define y_width 1
/*
 * Create external references here.  
 *
 */
/* %%%-SFUNWIZ_wrapper_externs_Changes_BEGIN --- EDIT HERE TO _END */
/* extern double func(double a); */
/* %%%-SFUNWIZ_wrapper_externs_Changes_END --- EDIT HERE TO _BEGIN */

/*
 * Output functions
 *
 */
void SDFPGainSwitch_Outputs_wrapper(const real32_T *sd_in,
                          uint32_T *gain_out,
                          uint32_T *fixpt_out,
                          real32_T *p_gain_out,
                          real_T *pwr_switching_inst,
                          real_T *pwr_leakage_inst,
                          real_T *pwr_total_inst ,
			      const real_T  *xD,
                          const real32_T  *gain, const int_T  p_width0, 
                          const uint32_T  *bitwidth, const int_T  p_width1, 
                          const uint32_T  *fp_position, const int_T  p_width2, 
                          const real_T  *frequency, const int_T p_width3)
{
/* %%%-SFUNWIZ_wrapper_Outputs_Changes_BEGIN --- EDIT HERE TO _END */
/* This sample sets the output equal to the input
         y0[0] = u0[0];
For complex signals use: y0[0].re = u0[0].re;
                         y0[0].im = u0[0].im;
                         y1[0].re = u1[0].re;
                         y1[0].im = u1[0].im;*/

   /*static uint32_T float_repr = -1;
   static uint32_T converted_float = 0;*/
   
   /*if( xD[0] == 0 ) {
     float_repr = fp32_to_fixed_point(gain[0], bitwidth[0], fp_position[0]);
     xD[1] = float_repr;
   }*/
   /*if( converted_float == 0 ) {
      float_repr = fp32_to_fixed_point(gain[0], bitwidth[0], fp_position[0]);
      converted_float = 1;
    } */
#define TESTdprintf(format, args...) ;
#define dprintf(format, args...) printf(format, ##args)

   uint32_T float_repr = xD[1];
   uint32_T float_repr_inv = -float_repr;

   fixpt_out[0] = float_repr;
   p_gain_out[0] = xD[1]; /*gain[0];*/

   if(sd_in[0] == -1) {
      gain_out[0] = float_repr_inv;
   } else if(sd_in[0] == 1) {
      gain_out[0] = float_repr;
   } else {
      /* Error Case */
      gain_out[0] = 0;
   }

   /* xD[2] contains the last value of the input. */
   uint32_T input_transitions = 0;
   if(sd_in[0] != xD[2]) {
      /* Determine which bits flipped. */
      uint32_T diff = float_repr ^ float_repr_inv;
      dprintf("float_repr=%x float_repr_inv=%x\n", float_repr, float_repr_inv);
      dprintf("Diff=%x sd_in[0]=%f xD[2]=%f\n", diff, sd_in[0], xD[2]);
      int i;
      for( i = 0; i < bitwidth[0]; i++ ) {
         if(diff & 0x1) input_transitions++;
         diff >>= 1;
      }
   } else {
      /* Otherwise switching is zero */
      input_transitions = 0;
   }

   double coef_static = 6.0e-12;
   double coef_switching = 5.0e-16;
   pwr_switching_inst[0] = 0.5f * coef_switching * input_transitions * frequency[0];
   pwr_leakage_inst[0] = 0.5f * coef_static;
   pwr_total_inst[0] = pwr_switching_inst[0] + pwr_leakage_inst[0];

   dprintf("input_transitions=%d pwr_switching_inst=%.50f\n", input_transitions, pwr_switching_inst[0]);

/* %%%-SFUNWIZ_wrapper_Outputs_Changes_END --- EDIT HERE TO _BEGIN */
}

/*
  * Updates function
  *
  */
void SDFPGainSwitch_Update_wrapper(const real32_T *sd_in,
                          const uint32_T *gain_out,
                          const uint32_T *fixpt_out,
                          const real32_T *p_gain_out,
                          const real_T *pwr_switching_inst,
                          const real_T *pwr_leakage_inst,
                          const real_T *pwr_total_inst ,
                          real_T *xD, 
                          const real32_T  *gain,  const int_T  p_width0,
                          const uint32_T  *bitwidth,  const int_T  p_width1,
                          const uint32_T  *fp_position,  const int_T  p_width2,
                           const real_T *frequency, const int_T  p_width3)
{
  /* %%%-SFUNWIZ_wrapper_Update_Changes_BEGIN --- EDIT HERE TO _END */
if( xD[0] == 0 ) {
     xD[1] = fp32_to_fixed_point(gain[0], bitwidth[0], fp_position[0]);
     xD[0] = 1;
}
/* %%%-SFUNWIZ_wrapper_Update_Changes_END --- EDIT HERE TO _BEGIN */
}
