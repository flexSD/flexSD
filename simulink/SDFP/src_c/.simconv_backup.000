#include <stdio.h>
#include <assert.h>

#define T_FP32_TO_FIXED_POINT_VERBOSITY 1
#define VERBOSITY 1

#if VERBOSITY >= 1
#  define DEBUGPRINTF1(format, args...) printf(format, ##args)
#else
#  define DEBUGPRINTF1(format, args...) ;
#endif

typedef unsigned int uint32;
#define f32_to_uint32(x) (*((uint32*)(&(x))))
#define f64_to_uint32_b0(x) (*((uint32*)(&(x))))
#define f64_to_uint32_b1(x) (*((uint32*)(&(x)+1)))

/**********************************************/
/**  32-bit Floating Point Helper Functions  **/
/**********************************************/
int fp32_get_exponent(float i) {
   uint32 f = f32_to_uint32(i);
   return ((f & 0x7F800000) >> 23) - 127;
} 

uint32 fp32_get_mantissa(float i) {
   uint32 f = f32_to_uint32(i);
   return (f & 0x007FFFFF);
}  
uint32 fp32_get_sign(float i) {
   uint32 f = f32_to_uint32(i);
   return (f & 0x80000000) != 0;
}  

uint32 i32_sweep_bits( uint32 i ) {
   uint32 p = 0, highest = 0;
   while(p < 32) {
      if( i & (1<<p) ) 
         highest = p;
      p++;
   }
   return highest;
}

uint32 fp32_to_fixed_point( float i, int bit_width, int point_position ) {

   assert(bit_width > point_position);

   int      i_exponent = fp32_get_exponent(i);
   uint32   i_mantissa = fp32_get_mantissa(i);
   uint32   i_sign     = fp32_get_sign(i);

   DEBUGPRINTF1("i_exponent: %d [%x]\n", i_exponent, i_exponent);
   DEBUGPRINTF1("i_mantissa: %d [%x]\n", i_mantissa, i_mantissa);
   DEBUGPRINTF1("i_sign: %d\n", i_sign);

   /* Make sure we can even represent the number */
   uint32 u_integer_part = ((uint32)i);
   uint32 integer_msb = i32_sweep_bits(u_integer_part);

   DEBUGPRINTF1("integer_msb: %d\n", integer_msb);

   if( integer_msb > (bit_width - point_position) ) {
      fprintf(stderr, "fp32_to_fixed_point: Not enough bits to represent integer portion of number.\n");
      return 0xFFFFFFFF;
   }

   /* Now reduce it to just the fractional part. */
   float f_decimal_part = i - (float)u_integer_part;
   DEBUGPRINTF1( "Decimal part, in float form: %e [%x]\n", f_decimal_part, f32_to_uint32(f_decimal_part) );

   int      f_exponent = fp32_get_exponent(f_decimal_part);
   uint32   f_mantissa = fp32_get_mantissa(f_decimal_part);
   uint32   f_sign     = fp32_get_sign(f_decimal_part);

   DEBUGPRINTF1("f_exponent: %d [%x]\n", f_exponent, f_exponent);
   DEBUGPRINTF1("f_mantissa: %d [%x]\n", f_mantissa, f_mantissa);
   DEBUGPRINTF1("f_sign: %d\n", f_sign);

   /* Insert the hidden bit */
   f_mantissa |= 0x00800000;
   /* NOTE: f_mantissa is now the decimal portion in binary, essentially shifted left by 23 digits. */
   DEBUGPRINTF1("f_mantissa with hidden bit: %d [%x]\n", f_mantissa, f_mantissa);

   /* Now shift our mantissa to isolate the fractional part */
   uint32 fractional_bits;
   if( f_exponent < 0 ) {
      f_mantissa >>= -f_exponent;
   } else {
      f_mantissa <<= f_exponent;
   }

   DEBUGPRINTF1("f_mantissa shifted: %d [%x]\n", f_mantissa, f_mantissa);

   uint32 final_number = 0;
   final_number = (f_mantissa & 0x007FFFFF);
   /* now the lower 23 bits contain the fractional part. We'll truncate it accordingly. */
   if( point_position > 23 ) {
      /* if the fixed point position is more than 23, then shift left to align the most significant
       * fraction part */
      final_number <<= point_position - 23;
   } else if( point_position < 23 ) {
      /* shift right to truncate extra bits */
      final_number >>= 23 - point_position;
   }

   /* Now that the fractional part is in place, we can put the integer portion into place */
   uint32 u_integer_masked = u_integer_part & ((1 << (bit_width-point_position))-1);
   final_number |= u_integer_masked << point_position;

   return final_number;
   
}

/**********************************************/
/**  64-bit Floating Point Helper Functions  **/
/**********************************************/
int fp64_get_exponent(float i) {
   uint32 f = f32_to_uint32(i);
   return ((f & 0x7F800000) >> 23) - 127;
} 

/*
uint32 fp32_get_mantissa(float i) {
   uint32 f = f32_to_uint32(i);
   return (f & 0x007FFFFF);
}  
uint32 fp32_get_sign(float i) {
   uint32 f = f32_to_uint32(i);
   return (f & 0x80000000) != 0;
}  

uint32 i32_sweep_bits( uint32 i ) {
   uint32 p = 0, highest = 0;
   while(p < 32) {
      if( i & (1<<p) ) 
         highest = p;
      p++;
   }
   return highest;
}
*/

qa_test_fp64_decomposition() {
   double df_test = 23.148292392e-10;
   DEBUGPRINTF1( "\n[64-bit FP Decomposition Test]\n" );
   DEBUGPRINTF1( "Floating point of test_float: %e [%08x %08x]\n", df_test, f64_to_uint32_b0(df_test),  f64_to_uint32_b1(df_test));

}


/*****************************************************************************/

qa_test_sweep() {
   int k;
   for(k = 0; k < 32; k++ ) { 
      uint32 kn = 1 << k | 0x107;
      DEBUGPRINTF1( "sweep for %x: %d\n", kn, i32_sweep_bits(kn) );
   }
}

/*****************************************************************************/

int main() {
   
   float test_float = 27.09375f; //15.22233;

   uint32 gain_result;
   uint32 bit_size;
   uint32 decimal_pos;

   bit_size = 16;
   decimal_pos = 8;

   /* grab just the integer part of the number */
   uint32 u_integer_part = ((uint32)test_float);
   uint32 f = u_integer_part << decimal_pos;
   /* now substract that from the floating point to get
    * everything to the right of the decimal point */
   float f_decimal_part = test_float - (float)u_integer_part;
   /* now to put this into integer format, we multiply the
    * decimal part by the 2^(# of bits for decimal). */
   float f_multiplier = (float)(1 << decimal_pos);
   float f_adjusted_decimal_part = f_decimal_part * f_multiplier;
   uint32 u_decimal_part = (uint32)( f_decimal_part * f_multiplier );

   DEBUGPRINTF1( "Floating point of test_float: %e [%x]\n", test_float, f32_to_uint32(test_float) );

   /*
   DEBUGPRINTF1( "Integer part: %d\n", u_integer_part );
   DEBUGPRINTF1( "Integer part, shifted: %x\n", f );
   DEBUGPRINTF1( "Multiplier: %e [%x]\n", f_multiplier, f32_to_uint32( f_multiplier ) );
   DEBUGPRINTF1( "Adjusted: %e [%x]\n", f_adjusted_decimal_part, f32_to_uint32( f_adjusted_decimal_part ) );
   DEBUGPRINTF1( "Decimal part, in float form: %e [%x]\n", f_decimal_part, f32_to_uint32(f_decimal_part) );
   DEBUGPRINTF1( "Decimal part, in integer: %d\n", f_decimal_part );
   DEBUGPRINTF1( "Decimal part, in hex: %x\n", f_decimal_part );

   DEBUGPRINTF1( "-----------------------------------------------\n" );
   DEBUGPRINTF1( "exp: %d\n", fp32_get_exponent(test_float) );
   DEBUGPRINTF1( "sign: %d\n", fp32_get_sign(test_float) );
   DEBUGPRINTF1( "mantissa: %d\n", fp32_get_mantissa(test_float) );
   */

   /*
   uint32 new_number = fp32_to_fixed_point(test_float, bit_size, decimal_pos);
   printf("New number: %d [%08x]\n", new_number, new_number );
   */
   qa_test_fp64_decomposition();

   return 0;

}
