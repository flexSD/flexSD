//Verilog testbench template generated by SCUBA Diamond_1.2_Production (92)
`timescale 1 ns / 1 ps
module tb;
    reg [3:0] WrAddress = 4'b0;
    reg [23:0] Data = 24'b0;
    reg WrClock = 0;
    reg WE = 0;
    reg WrClockEn = 0;
    reg [3:0] RdAddress = 4'b0;
    wire [23:0] Q;

    integer i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;

    GSR GSR_INST (.GSR(1'b1));
    PUR PUR_INST (.PUR(1'b1));

    lattice_ram_24bit_16word u1 (.WrAddress(WrAddress), .Data(Data), .WrClock(WrClock), 
        .WE(WE), .WrClockEn(WrClockEn), .RdAddress(RdAddress), .Q(Q)
    );

    initial
    begin
       WrAddress <= 0;
      #100;
      #10;
      for (i1 = 0; i1 < 38; i1 = i1 + 1) begin
        @(posedge WrClock);
        #1  WrAddress <= WrAddress + 1'b1;
      end
    end
    initial
    begin
       Data <= 0;
      #100;
      #10;
      for (i2 = 0; i2 < 19; i2 = i2 + 1) begin
        @(posedge WrClock);
        #1  Data <= Data + 1'b1;
      end
    end
    always
    #5.00 WrClock <= ~ WrClock;

    initial
    begin
       WE <= 1'b0;
      #10;
      for (i4 = 0; i4 < 19; i4 = i4 + 1) begin
        @(posedge WrClock);
        #1  WE <= 1'b1;
      end
       WE <= 1'b0;
    end
    initial
    begin
       WrClockEn <= 1'b0;
      #100;
      #10;
       WrClockEn <= 1'b1;
    end
    initial
    begin
       RdAddress <= 0;
      #100;
      #10;
      for (i6 = 0; i6 < 38; i6 = i6 + 1) begin
        #10;
         RdAddress <= RdAddress + 1'b1;
      end
    end
endmodule